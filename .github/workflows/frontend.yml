# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI/CD for frontend

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Setup Node.js
        uses: actions/setup-node@v3.8.1
        with:
          node-version: '18.18.0'
          
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
        
      - name: Cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node Dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install

      # - name: Copy to src
      #   run: |
      #     mkdir -p src
      #     ls
      #     cp -a . src
  build_and_release:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ap-southeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push image to AWS ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: hello-world
          TAG: latest
        run: |
          docker build -f Dockerfile -t ${{env.REGISTRY}}/${{env.REPOSITORY}}:${{env.TAG}} .
          docker tag ${{env.REPOSITORY}}:${{env.TAG}} ${{env.REGISTRY}}/${{env.REPOSITORY}}:${{env.TAG}}
          docker push ${{env.REGISTRY}}/${{env.REPOSITORY}}:${{env.TAG}}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition CICDPraticeFrontendTask --query taskDefinition > task-definition.json
          cat task-definition.json
          
      - name: Render task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          container-name: CICDPraticeFrontendContainer
          image: ${{steps.build-image.outputs.image}}
          task-definition: task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: CICDPraticeFrontendService
          cluster: CICD-practice
          wait-for-service-stability: true
          
            
